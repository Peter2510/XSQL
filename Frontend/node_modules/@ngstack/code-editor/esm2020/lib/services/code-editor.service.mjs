import { Injectable, InjectionToken, Optional, Inject } from '@angular/core';
import { Subject, BehaviorSubject } from 'rxjs';
import * as i0 from "@angular/core";
export const EDITOR_SETTINGS = new InjectionToken('EDITOR_SETTINGS');
export class CodeEditorService {
    constructor(settings) {
        this.baseUrl = 'https://cdn.jsdelivr.net/npm/monaco-editor/min';
        this.typingsWorkerUrl = 'https://cdn.jsdelivr.net/npm/@ngstack/code-editor/workers/typings-worker.js';
        this.typingsLoaded = new Subject();
        this.loaded = new BehaviorSubject(null);
        this.loadingTypings = new BehaviorSubject(false);
        const defaults = {
            baseUrl: this.baseUrl,
            typingsWorkerUrl: this.typingsWorkerUrl,
            ...settings,
        };
        this.baseUrl = defaults.baseUrl;
        this.typingsWorkerUrl = defaults.typingsWorkerUrl;
    }
    loadTypingsWorker() {
        if (!this.typingsWorker && window.Worker) {
            if (this.typingsWorkerUrl.startsWith('http')) {
                const proxyScript = `importScripts('${this.typingsWorkerUrl}');`;
                const proxy = URL.createObjectURL(new Blob([proxyScript], { type: 'text/javascript' }));
                this.typingsWorker = new Worker(proxy);
            }
            else {
                this.typingsWorker = new Worker(this.typingsWorkerUrl);
            }
            this.typingsWorker.addEventListener('message', (e) => {
                this.loadingTypings.next(false);
                this.typingsLoaded.next(e.data);
            });
        }
        return this.typingsWorker;
    }
    loadTypings(dependencies) {
        if (dependencies && dependencies.length > 0) {
            const worker = this.loadTypingsWorker();
            if (worker) {
                this.loadingTypings.next(true);
                worker.postMessage({
                    dependencies,
                });
            }
        }
    }
    loadEditor() {
        return new Promise((resolve) => {
            const onGotAmdLoader = () => {
                window.require.config({
                    paths: { vs: `${this.baseUrl}/vs` },
                });
                if (this.baseUrl.startsWith('http')) {
                    const proxyScript = `
            self.MonacoEnvironment = {
              baseUrl: "${this.baseUrl}"
            };
            importScripts('${this.baseUrl}/vs/base/worker/workerMain.js');
          `;
                    const proxy = URL.createObjectURL(new Blob([proxyScript], { type: 'text/javascript' }));
                    window['MonacoEnvironment'] = {
                        getWorkerUrl: function () {
                            return proxy;
                        },
                    };
                }
                window.require(['vs/editor/editor.main'], () => {
                    this.loaded.next({ monaco });
                    resolve();
                });
            };
            if (!window.require) {
                const loaderScript = document.createElement('script');
                loaderScript.type = 'text/javascript';
                loaderScript.src = `${this.baseUrl}/vs/loader.js`;
                loaderScript.addEventListener('load', onGotAmdLoader);
                document.body.appendChild(loaderScript);
            }
            else {
                onGotAmdLoader();
            }
        });
    }
}
CodeEditorService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.1", ngImport: i0, type: CodeEditorService, deps: [{ token: EDITOR_SETTINGS, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
CodeEditorService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.1", ngImport: i0, type: CodeEditorService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.1", ngImport: i0, type: CodeEditorService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [EDITOR_SETTINGS]
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29kZS1lZGl0b3Iuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2NvZGUtZWRpdG9yL3NyYy9saWIvc2VydmljZXMvY29kZS1lZGl0b3Iuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLGNBQWMsRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzdFLE9BQU8sRUFBRSxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sTUFBTSxDQUFDOztBQUtoRCxNQUFNLENBQUMsTUFBTSxlQUFlLEdBQUcsSUFBSSxjQUFjLENBQy9DLGlCQUFpQixDQUNsQixDQUFDO0FBZUYsTUFBTSxPQUFPLGlCQUFpQjtJQWE1QixZQUdFLFFBQTRCO1FBZjlCLFlBQU8sR0FBRyxnREFBZ0QsQ0FBQztRQUUzRCxxQkFBZ0IsR0FDZCw2RUFBNkUsQ0FBQztRQUVoRixrQkFBYSxHQUFHLElBQUksT0FBTyxFQUFlLENBQUM7UUFDM0MsV0FBTSxHQUFHLElBQUksZUFBZSxDQUF5QixJQUFJLENBQUMsQ0FBQztRQUUzRCxtQkFBYyxHQUFHLElBQUksZUFBZSxDQUFVLEtBQUssQ0FBQyxDQUFDO1FBU25ELE1BQU0sUUFBUSxHQUFHO1lBQ2YsT0FBTyxFQUFFLElBQUksQ0FBQyxPQUFPO1lBQ3JCLGdCQUFnQixFQUFFLElBQUksQ0FBQyxnQkFBZ0I7WUFDdkMsR0FBRyxRQUFRO1NBQ1osQ0FBQztRQUVGLElBQUksQ0FBQyxPQUFPLEdBQUcsUUFBUSxDQUFDLE9BQU8sQ0FBQztRQUNoQyxJQUFJLENBQUMsZ0JBQWdCLEdBQUcsUUFBUSxDQUFDLGdCQUFnQixDQUFDO0lBQ3BELENBQUM7SUFFTyxpQkFBaUI7UUFDdkIsSUFBSSxDQUFDLElBQUksQ0FBQyxhQUFhLElBQVUsTUFBTyxDQUFDLE1BQU0sRUFBRTtZQUMvQyxJQUFJLElBQUksQ0FBQyxn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WSxDQUFDLGdCQUFnQixDQUFDLE1BQU0sRUFBRSxjQUFjLENBQUMsQ0FBQztnQkFDdEQsUUFBUSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsWUFBWSxDQUFDLENBQUM7YUFDekM7aUJBQU07Z0JBQ0wsY0FBYyxFQUFFLENBQUM7YUFDbEI7UUFDSCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7OzhHQW5HVSxpQkFBaUIsa0JBZWxCLGVBQWU7a0hBZmQsaUJBQWlCLGNBRmhCLE1BQU07MkZBRVAsaUJBQWlCO2tCQUg3QixVQUFVO21CQUFDO29CQUNWLFVBQVUsRUFBRSxNQUFNO2lCQUNuQjs7MEJBZUksUUFBUTs7MEJBQ1IsTUFBTTsyQkFBQyxlQUFlIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSwgSW5qZWN0aW9uVG9rZW4sIE9wdGlvbmFsLCBJbmplY3QgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFN1YmplY3QsIEJlaGF2aW9yU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgQ29kZUVkaXRvclNldHRpbmdzIH0gZnJvbSAnLi4vZWRpdG9yLXNldHRpbmdzJztcblxuZGVjbGFyZSBjb25zdCBtb25hY286IGFueTtcblxuZXhwb3J0IGNvbnN0IEVESVRPUl9TRVRUSU5HUyA9IG5ldyBJbmplY3Rpb25Ub2tlbjxDb2RlRWRpdG9yU2V0dGluZ3M+KFxuICAnRURJVE9SX1NFVFRJTkdTJ1xuKTtcblxuZXhwb3J0IGludGVyZmFjZSBUeXBpbmdzSW5mbyB7XG4gIGVudHJ5UG9pbnRzOiB7IFtrZXk6IHN0cmluZ106IHN0cmluZyB9O1xuICBmaWxlczogQXJyYXk8e1xuICAgIGNvbnRlbnQ6IHN0cmluZztcbiAgICBuYW1lOiBzdHJpbmc7XG4gICAgdXJsOiBzdHJpbmc7XG4gICAgcGF0aDogc3RyaW5nO1xuICB9Pjtcbn1cblxuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCcsXG59KVxuZXhwb3J0IGNsYXNzIENvZGVFZGl0b3JTZXJ2aWNlIHtcbiAgYmFzZVVybCA9ICdodHRwczovL2Nkbi5qc2RlbGl2ci5uZXQvbnBtL21vbmFjby1lZGl0b3IvbWluJztcblxuICB0eXBpbmdzV29ya2VyVXJsID1cbiAgICAnaHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L25wbS9AbmdzdGFjay9jb2RlLWVkaXRvci93b3JrZXJzL3R5cGluZ3Mtd29ya2VyLmpzJztcblxuICB0eXBpbmdzTG9hZGVkID0gbmV3IFN1YmplY3Q8VHlwaW5nc0luZm8+KCk7XG4gIGxvYWRlZCA9IG5ldyBCZWhhdmlvclN1YmplY3Q8eyBtb25hY286IGFueSB9IHwgbnVsbD4obnVsbCk7XG5cbiAgbG9hZGluZ1R5cGluZ3MgPSBuZXcgQmVoYXZpb3JTdWJqZWN0PGJvb2xlYW4+KGZhbHNlKTtcblxuICBwcml2YXRlIHR5cGluZ3NXb3JrZXI6IFdvcmtlcjtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBAT3B0aW9uYWwoKVxuICAgIEBJbmplY3QoRURJVE9SX1NFVFRJTkdTKVxuICAgIHNldHRpbmdzOiBDb2RlRWRpdG9yU2V0dGluZ3NcbiAgKSB7XG4gICAgY29uc3QgZGVmYXVsdHMgPSB7XG4gICAgICBiYXNlVXJsOiB0aGlzLmJhc2VVcmwsXG4gICAgICB0eXBpbmdzV29ya2VyVXJsOiB0aGlzLnR5cGluZ3NXb3JrZXJVcmwsXG4gICAgICAuLi5zZXR0aW5ncyxcbiAgICB9O1xuXG4gICAgdGhpcy5iYXNlVXJsID0gZGVmYXVsdHMuYmFzZVVybDtcbiAgICB0aGlzLnR5cGluZ3NXb3JrZXJVcmwgPSBkZWZhdWx0cy50eXBpbmdzV29ya2VyVXJsO1xuICB9XG5cbiAgcHJpdmF0ZSBsb2FkVHlwaW5nc1dvcmtlcigpOiBXb3JrZXIge1xuICAgIGlmICghdGhpcy50eXBpbmdzV29ya2VyICYmICg8YW55PndpbmRvdykuV29ya2VyKSB7XG4gICAgICBpZiAodGhpcy50eXBpbmdzV29ya2VyVXJsLnN0YXJ0c1dpdGgoJ2h0dHAnKSkge1xuICAgICAgICBjb25zdCBwcm94eVNjcmlwdCA9IGBpbXBvcnRTY3JpcHRzKCcke3RoaXMudHlwaW5nc1dvcmtlclVybH0nKTtgO1xuICAgICAgICBjb25zdCBwcm94eSA9IFVSTC5jcmVhdGVPYmplY3RVUkwoXG4gICAgICAgICAgbmV3IEJsb2IoW3Byb3h5U2NyaXB0XSwgeyB0eXBlOiAndGV4dC9qYXZhc2NyaXB0JyB9KVxuICAgICAgICApO1xuICAgICAgICB0aGlzLnR5cGluZ3NXb3JrZXIgPSBuZXcgV29ya2VyKHByb3h5KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMudHlwaW5nc1dvcmtlciA9IG5ldyBXb3JrZXIodGhpcy50eXBpbmdzV29ya2VyVXJsKTtcbiAgICAgIH1cbiAgICAgIHRoaXMudHlwaW5nc1dvcmtlci5hZGRFdmVudExpc3RlbmVyKCdtZXNzYWdlJywgKGUpID0+IHtcbiAgICAgICAgdGhpcy5sb2FkaW5nVHlwaW5ncy5uZXh0KGZhbHNlKTtcbiAgICAgICAgdGhpcy50eXBpbmdzTG9hZGVkLm5leHQoZS5kYXRhKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy50eXBpbmdzV29ya2VyO1xuICB9XG5cbiAgbG9hZFR5cGluZ3MoZGVwZW5kZW5jaWVzOiBzdHJpbmdbXSkge1xuICAgIGlmIChkZXBlbmRlbmNpZXMgJiYgZGVwZW5kZW5jaWVzLmxlbmd0aCA+IDApIHtcbiAgICAgIGNvbnN0IHdvcmtlciA9IHRoaXMubG9hZFR5cGluZ3NXb3JrZXIoKTtcbiAgICAgIGlmICh3b3JrZXIpIHtcbiAgICAgICAgdGhpcy5sb2FkaW5nVHlwaW5ncy5uZXh0KHRydWUpO1xuICAgICAgICB3b3JrZXIucG9zdE1lc3NhZ2Uoe1xuICAgICAgICAgIGRlcGVuZGVuY2llcyxcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgbG9hZEVkaXRvcigpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcbiAgICAgIGNvbnN0IG9uR290QW1kTG9hZGVyID0gKCkgPT4ge1xuICAgICAgICAoPGFueT53aW5kb3cpLnJlcXVpcmUuY29uZmlnKHtcbiAgICAgICAgICBwYXRoczogeyB2czogYCR7dGhpcy5iYXNlVXJsfS92c2AgfSxcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKHRoaXMuYmFzZVVybC5zdGFydHNXaXRoKCdodHRwJykpIHtcbiAgICAgICAgICBjb25zdCBwcm94eVNjcmlwdCA9IGBcbiAgICAgICAgICAgIHNlbGYuTW9uYWNvRW52aXJvbm1lbnQgPSB7XG4gICAgICAgICAgICAgIGJhc2VVcmw6IFwiJHt0aGlzLmJhc2VVcmx9XCJcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBpbXBvcnRTY3JpcHRzKCcke3RoaXMuYmFzZVVybH0vdnMvYmFzZS93b3JrZXIvd29ya2VyTWFpbi5qcycpO1xuICAgICAgICAgIGA7XG4gICAgICAgICAgY29uc3QgcHJveHkgPSBVUkwuY3JlYXRlT2JqZWN0VVJMKFxuICAgICAgICAgICAgbmV3IEJsb2IoW3Byb3h5U2NyaXB0XSwgeyB0eXBlOiAndGV4dC9qYXZhc2NyaXB0JyB9KVxuICAgICAgICAgICk7XG4gICAgICAgICAgd2luZG93WydNb25hY29FbnZpcm9ubWVudCddID0ge1xuICAgICAgICAgICAgZ2V0V29ya2VyVXJsOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIHJldHVybiBwcm94eTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuXG4gICAgICAgICg8YW55PndpbmRvdykucmVxdWlyZShbJ3ZzL2VkaXRvci9lZGl0b3IubWFpbiddLCAoKSA9PiB7XG4gICAgICAgICAgdGhpcy5sb2FkZWQubmV4dCh7IG1vbmFjbyB9KTtcbiAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgIH0pO1xuICAgICAgfTtcblxuICAgICAgaWYgKCEoPGFueT53aW5kb3cpLnJlcXVpcmUpIHtcbiAgICAgICAgY29uc3QgbG9hZGVyU2NyaXB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0Jyk7XG4gICAgICAgIGxvYWRlclNjcmlwdC50eXBlID0gJ3RleHQvamF2YXNjcmlwdCc7XG4gICAgICAgIGxvYWRlclNjcmlwdC5zcmMgPSBgJHt0aGlzLmJhc2VVcmx9L3ZzL2xvYWRlci5qc2A7XG4gICAgICAgIGxvYWRlclNjcmlwdC5hZGRFdmVudExpc3RlbmVyKCdsb2FkJywgb25Hb3RBbWRMb2FkZXIpO1xuICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGxvYWRlclNjcmlwdCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvbkdvdEFtZExvYWRlcigpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG59XG4iXX0=